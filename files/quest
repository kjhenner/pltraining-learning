#!/bin/bash
#
# Run with "update" to update quest content.
# Run with "resetlocks" for emergency cleanup.  The updatecache argument
# is to just force an update of the caches, namely to be run from bash's
# PROMPT_COMMAND so that tmux can just use the caches instead of wasting
# cpu on running a command over and over that can only change when the
# user runs a command anyway.
# Authors: Evan K Langlois, Carthik Sharma, Josh Samuelson.
# This script was written by Evan K Langlois and donated to PuppetLabs
# without restrictions of any kind.  Comments to: uudruid74@gmail.com

CMDLINE=`echo $* | tr -d ' '` 
BASE=`basename $0`
BUFFER="/tmp/${BASE}${CMDLINE}.out"
LOCK="/tmp/${BASE}.lck"
RUBY='/opt/puppetlabs/puppet/bin/ruby'
RAKE='/opt/puppetlabs/puppet/bin/rake'
DIR='/root/.testing'
TEST='test.rb'
CACHEDIR='/opt/lvmguide'
WEBROOT='/var/www/html/lvmguide'
LOCALREPO='/usr/src/courseware-lvm'

if [ "$1" == "--update" -o "$1" == "-u" ]; then
  latest="$(cd /usr/src/courseware-lvm && git tag | grep -ve "[rc|beta]" | sort -V | tail -1)"
  current="$(cd /usr/src/courseware-lvm && git describe --tags --abbrev=0)"
  if [ $latest == $current ]; then
    echo "Quest content is already up to date. (${current})"
    exit
  fi
  echo "Current version is ${current}. Latest version is ${latest}."
  read -r -p "Updating may disrupt current quest progress. Continue? [Y/n] " response
  if [[ $response =~ ^[nN][oO]|[nN]$ ]]
  then
      echo "Update aborted"
      exit
  else
    if [ -e "$LOCALREPO" ]; then
      cd $LOCALREPO
      $RAKE update
    else
      echo "Unable to update to content.  No local content repository found."
    fi
    exit
  fi
fi

#- As long as a lock file exists, we use the previous output
#- The cached output isn't used as long as there is no lock,
#- meaning the command line completed.

if [ "$1" == "updatecache" ]; then
  shift
  CMDLINE=`echo $* | tr -d ' '`  BUFFER="/tmp/${BASE}${CMDLINE}.out"
  if [ -e "$LOCK" ]; then       #- lock exists
    if [ -s "$BUFFER" ]; then   #- is not empty - use cached output
      cat $BUFFER
    fi
    exit                      #- there is a lock and nothing in the buffer
                              # so exit and let previous invocation
                              # finish
  else                        #- no lock, run new copy
    trap "rm -f $LOCK" EXIT
    touch $LOCK
  fi
                              #- This part is run by tmux and cached
  $RUBY $DIR/$TEST $* 2>/dev/null | tee $BUFFER.part
                              #- Only cache non-empty outputs
  if [ -s "$BUFFER.part" ]; then
      mv $BUFFER.part $BUFFER
  fi
else                          #- if not run with updatecache
  if [ "$1" == "resetlocks" ]; then
    echo Killing all instances of $TEST and resetting lock
    trap "rm -f /tmp/${BASE}*" EXIT
    ps -ef | grep $RUBY | grep $TEST | awk  '{ print $2 }' \
          | xargs kill 2>/dev/null
    exit
  else                      #- No caching, just run
                            #- Manually run - original script
    $RUBY $DIR/$TEST $* 2>/dev/null 
  fi
fi
